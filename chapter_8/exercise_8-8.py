# Exercise 8-8: User Albums
#   Define a function that takes three parameters: artist_name, album_title,
# and optionally, num_songs. The function should return a dictionary of the
# data. Use a 'while' loop to prompt users to enter the appropriate data.
# provide instruction for breaking out if the input loop.


def make_album(artist_name, album_title, num_songs=None):
    """Creates a dictionary of album/artist data and returns the dictionary
    to the caller"""
    album = {
        'name': artist_name,
        'album': album_title,
        'num_songs': num_songs,
    }

    # This will not work!
#   album['name'] = artist_name
#   album['album'] = album_title
#   album['num_songs'] = num_songs

    return album


# takes a list parameter
def print_album(albums):
    """Print the data dictionary generated by make_album(list of
    dictionaries)."""
    print("\nPrinting album data:")
    for album in albums:
        print(f"Artist Name: {album['name'].title()}")
        print(f"\tAlbum Name: {album['album'].title()}")
        if (album['num_songs']):
            print(f"\tNumber Songs: {album['num_songs']}")

        print("")

artists = []
flag = True

print("Follow the prompts and enter the ablum data. Type 'q' to quit at any time...")
while True:
    artist = input("Artist name ['q' to quit]: ")
    if artist == 'q':
        break
    album = input("Album name ['q' to quit]: ")
    if artist == 'q':
        break
    number_songs = input("Number songs on album ['q' to quit]: ")
    if artist == 'q':
        break

    print("\nSaving data...\n")
    artists.append(make_album(artist, album, number_songs))

if (artists):
    print_album(artists)
